.. _c-get-started-download-and-install:

====================
Download and Install
====================

Download the {+driver-short+}
----------------------

The {+driver-short+} consists of two libraries: ``libbson`` and
``libmongoc``. In this guide, you will learn how to install ``libmongoc``,
which comes bundled with ``libbson``.

You can install the {+driver-short+} by using
a package manager, or by installing the libraries from source. Different Linux
distributions install different versions of the driver when installed with a
package manager. Because of this, you should check the version your distribution
includes before installing the driver.

On RedHat Enterprise Linux (RHEL) distributions, you can check the version by
running the following command in your shell:

.. code-block:: bash

   sudo dnf info mongo-c-driver-devel

On Debian-based distributions, you can check the version by running the
following command in your shell:

.. code-block:: bash

   apt-cache policy libmongoc-dev

If the version of the driver that is available is not the version you want, you
can install the driver from source.
.. TODO: To learn how to install the driver from source, see the c-install-from-source guide.

To learn how to install the driver by using a package manager, select the tab corresponding to
your operating system:

.. tabs::

   .. tab:: Linux
      :tabid: install-linux

      .. _c-redhat-install:

      RedHat Enterprise Linux Distributions
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      You can install the driver on RedHat Enterprise Linux (RHEL)
      distributions, version 7 or later, or distributions based on RHEL,
      such as:

      - `CentOS <https://www.centos.org/>`__
      - `Rocky Linux <https://rockylinux.org/>`__
      - `AlmaLinux <https://almalinux.org/>`__

      Before you install the driver on a RHEL distribution, not including
      Fedora, you must first enable the Extra Packages for Enterprise
      Linux (EPEL) repository. You can enable the EPEL repository by
      installing the ``epel-release`` package, as shown in the following
      example:

      .. code-block:: bash

          yum install epel-release

      Then, you can install the {+driver-short+}
      by using ``yum``. To do so, run the following command in
      your shell:

      .. code-block:: bash

         yum install mongo-c-driver-devel
        
      .. note:: Developer Packages
      
         The preceding code example installs the developer packages, which
         are required to build applications that use the {+driver-short+}. To
         install only the libraries, without development files, run the
         following command:

         .. code-block:: bash

            yum install mongo-c-driver

      If you are installing on a RHEL distribution that is version 8 or
      later, we recommend running the preceding code examples by using
      ``dnf`` instead of ``yum``.

      Fedora
      ~~~~~~

      If you are using Fedora or an enterprise Linux distribution of
      version 8 or later, you can install the driver by using the same
      commands as shown in the :ref:`preceding example <c-redhat-install>`
      and replacing ``yum`` with ``dnf``.

      The following example shows how to install the {+driver-short+} in a
      Fedora distribution:

      .. code-block:: bash

         dnf install mongo-c-driver-devel

      Debian-Based Distributions
      ~~~~~~~~~~~~~~~~~~~~~~~~~~

      In Debian-Based Linux distributions, including Ubuntu and Ubuntu
      derivatives, the driver libraries are available through the Advanced
      Packaging Tool (APT). You can install the driver with APT by running
      the following command in your shell:

      .. code-block:: bash

         apt install libmongoc-dev
        
      The preceding code example installs the developer packages, which
      are required to build applications that use the {+driver-short+}. To
      install only the libraries, without development files, run the
      following command:

      .. code-block:: bash

         apt install libmongoc-1.0-0

   .. tab:: Windows
      :tabid: install-windows

      For Windows environments, we recommend building the {+driver-short+}
      libraries from source to ensure maximum compatibility with the local
      toolchain. You can automate building from source by using a
      from-source library package management tool, such as 
      `vcpkg <https://vcpkg.io>`__.

      .. tip::

         To learn how to get started with vcpkg, see the `vcpkg Get Started
         guide <https://learn.microsoft.com/en-us/vcpkg/get_started/overview>`__
         in the Microsoft documentation.
        
      In `vcpkg manifest mode <https://learn.microsoft.com/en-us/vcpkg/users/manifests>`__, add the
      driver library to your project's ``vcpkg.json`` manifest file,
      as shown in the following example:
 
      .. code-block:: js
          
          {
             // ...
             "dependencies": [
               // ...
               "mongo-c-driver"
             ]
          }
                
      When you build a CMake project with vcpkg integration and have a
      ``vcpkg.json`` manifest file, vcpkg automatically installs the project's
      dependencies before proceeding with configuration.

      If you are using `vcpkg classic mode <https://learn.microsoft.com/en-us/vcpkg/users/classic-mode>`__,
      you can install the driver by running the following command in
      your shell:
        
      .. code-block:: bash

         vcpkg install mongo-c-driver

      After you install the driver, the standard CMake configuration file
      is available, as well as the generated ``IMPORTED`` targets. You can
      create a ``CMakeLists.txt`` file as shown in the following example:
        
      .. code-block:: cmake
       
         find_package(mongoc-1.0 CONFIG REQUIRED)
         target_link_libraries(my-application
             PRIVATE $<IF:$<TARGET_EXISTS:mongo::mongoc_shared>,mongo::mongoc_shared,mongo::mongoc_static>)
        
      .. note::
        
         You can use the ``$<IF:$<TARGET_EXISTS...>:...>`` generator
         expression in the preceding example to switch the link type of
         ``libmongoc`` based on the form that is available from the
         ``find_package()`` command. ``libmongoc`` supports building with
         both *dynamic* and *static* library types, but vcpkg
         installs only one type at a time.
        
      To configure the CMake project with vcpkg integration, set the CMake
      toolchain file in the configuration command by running the following
      commands in your shell:
        
      .. code-block:: bash

         cmake -S . -B _build -D
         CMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake
            
   .. tab:: MacOS
      :tabid: install-mac

      You can download the {+driver-short+} on MacOS by using the `Homebrew
      package manager <https://brew.sh/>`__. To do so, run the following command in
      your shell:

      .. code-block:: bash

          brew install mongo-c-driver

.. TODO:
    .. To learn how to install the driver libraries from source, see the
    .. :ref:`c-install-from-source`` guide.

After you complete these steps, you have the {+driver-short+} installed 
on your machine.

.. include:: /includes/get-started/troubleshoot.rst