.. _c-write-transactions:

============
Transactions
============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: ACID, write, consistency, code example

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to perform
**transactions**. Transactions allow you to run a series of operations that do 
not change any data until the transaction is committed. If any operation in 
the transaction returns an error, the driver cancels the transaction and discards 
all data changes before they ever become visible.

In MongoDB, transactions run within logical **sessions**. A
session is a grouping of related read or write operations that you intend to run 
sequentially. Sessions enable **causal consistency** for a
group of operations and allow you to run operations in an
**ACID-compliant transaction**, which is a transaction that meets an expectation
of atomicity, consistency, isolation, and durability. MongoDB guarantees that the 
data involved in your transaction operations remains consistent, even if the 
operations encounter unexpected errors.

When using the {+driver-short+}, you can create a new session from a
``mongoc_client_t`` instance as a ``mongoc_client_session_t`` type. We recommend that you
reuse your ``mongoc_client_t`` for multiple sessions and transactions instead of
creating a new client each time.

.. warning::

   Use a ``mongoc_client_session_t`` only with the ``mongoc_client_t`` (or associated
   ``mongoc_database_t`` or ``mongoc_collection_t``) that created it. Using a
   ``mongoc_client_session_t`` with a different ``mongoc_client_t`` results in operation
   errors.

Sample Data
~~~~~~~~~~~

The examples in this section use the ``restaurants`` collection in the ``sample_restaurants``
database from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the
:atlas:`Get Started with Atlas </getting-started>` guide.

Methods
-------

After you start a session by using the ``mongoc_client_start_session()`` function, you can
manage the session state by using the following functions:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Function
     - Description

   * - ``mongoc_client_session_start_transaction()``
     - | Starts a new transaction, configured with the given options, on
         this session. Returns ``false`` and sets the provided error if there are
         invalid arguments, such as a  session with a transaction already in progress. To
         learn more about this function, see the :manual:`startTransaction() page
         </reference/method/Session.startTransaction/>`  in the Server manual.

   * - ``mongoc_client_session_abort_transaction()``
     - | Ends the active transaction for this session. Returns ``false`` and sets the provided
         error if there is no active transaction for the session or the
         transaction has been committed or ended. To learn more about
         this function, see the :manual:`abortTransaction() page
         </reference/method/Session.abortTransaction/>`  in the Server manual.

   * - ``mongoc_client_session_commit_transaction()``
     - | Commits the active transaction for this session. Returns an
         error if there is no active transaction for the session or if the
         transaction was ended. To learn more about
         this method, see the :manual:`commitTransaction() page
         </reference/method/Session.commitTransaction/>`  in the Server manual.

   * - ``mongoc_client_session_with_transaction()``
     - | Starts a transaction on this session and runs the provided callback function once, then
         commits the transaction. In the event of an exception, this function may retry
         the commit or the entire transaction, which may invoke the callback multiple 
         times by a single call to ``mongoc_client_session_with_transaction()``.

   * - ``mongoc_client_session_destroy()``
     - | Aborts any transactions in progress and ends this session. Frees
         all client resources associated with this session.

To learn more about functions that retrieve ``mongoc_client_session_t`` properties and
modify mutable session properties, see the :ref:`API documentation <c-api-docs-transactions>`.

Example
-------

The following example shows how you can create a session, create a
transaction, and commit a multi-document insert operation through the
following steps:

1. Create a session from the client by using the ``mongoc_client_session_start_transaction()``
   function.
#. Use the ``mongoc_client_session_start_transaction()`` function to start a transaction.
#. Insert multiple documents into the ``restaurants`` collection by using the
   ``mongoc_collection_insert_many()`` function. The ``mongoc_collection_insert_many()``
   function specifies the session as an option.
#. Commit the transaction by using the ``mongoc_client_session_commit_transaction()`` function.
#. End the session by using the ``mongoc_client_session_destroy()`` function.

.. literalinclude:: /includes/write/transactions.c
   :start-after: start-transaction
   :end-before: end-transaction
   :language: c
   :copyable:
   :dedent:

Additional Information
----------------------

To learn more about the concepts mentioned in this guide, see the following pages in 
the Server manual:

- :manual:`Transactions </core/transactions/>`
- :manual:`Server Sessions </reference/server-sessions>`
- :manual:`Read Isolation, Consistency, and Recency </core/read-isolation-consistency-recency/#causal-consistency>`

To learn more about ACID compliance, see the :website:`What are ACID
Properties in Database Management Systems? </basics/acid-transactions>`
article on the MongoDB website.

.. _c-api-docs-transactions:

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the types or functions discussed in this
guide, see the following API documentation:

- `mongoc_client_session_t <{+api-libmongoc+}/mongoc_client_session_t.html>`_
- `mongoc_client_start_session() <{+api-libmongoc+}/mongoc_client_start_session.html>`_
- `mongoc_client_session_start_transaction() <{+api-libmongoc+}/mongoc_client_session_start_transaction.html>`_
- `mongoc_client_session_abort_transaction() <{+api-libmongoc+}/mongoc_client_session_abort_transaction.html>`_
- `mongoc_client_session_commit_transaction() <{+api-libmongoc+}/mongoc_client_session_commit_transaction.html>`_
- `mongoc_client_session_with_transaction() <{+api-libmongoc+}/mongoc_client_session_with_transaction.html>`_
- `mongoc_client_session_destroy() <{+api-libmongoc+}/mongoc_client_session_destroy.html>`_